import java.util.stream.Collectors

buildscript {
  def rootAbsolutePath = projectDir.parent
  project.apply from: "$rootAbsolutePath/android/constants.gradle"

  repositories {
    google()
    mavenCentral()
    maven { url = project.ext.ktlintGradleMavenRepository }
  }

  dependencies {
    classpath("com.android.tools.build:gradle:${project.ext.gradle}")
    classpath("com.github.kezong:fat-aar:${project.ext.fatAar}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.kotlin}")
    classpath("org.jlleitschuh.gradle:ktlint-gradle:${project.ext.ktlintGradle}")
  } 
}

plugins {
  /** This is needed for publishing (e.g. jitpack.io */
  id "maven-publish"
}

def rootAbsolutePath = projectDir.parent

subprojects { thisProject ->
  apply(plugin: "com.android.library")
  apply(plugin: "kotlin-android")
  apply(plugin: "org.jlleitschuh.gradle.ktlint")
  apply(from: "$rootAbsolutePath/android/constants.gradle")

  group = "com.github.protoman92.KotlinRedux"
  version = "1.0-SNAPSHOT"

  /**
   * This task needs to depend on compileDebugUnitTestJavaWithJavac, otherwise the
   * /tmp/kotlin-classes/debugUnitTest directory will not be generated, leading to failures in
   * dependents' tests.
   */
  task packageTestJar(type: Jar, dependsOn: "compileDebugUnitTestJavaWithJavac") {
    archiveFileName.set("${thisProject.name}-test.jar")

    from(new File(String.join("/", [
      thisProject.buildDir.absolutePath,
      "tmp",
      "kotlin-classes",
      "debugUnitTest"
    ])))
  }

  configurations {
    testArtifacts
  }

  artifacts {
    testArtifacts packageTestJar
  }

  android {
    def namespaceComponents = new ArrayList([
      "org",
      "swiften",
      "redux",
      "android"
    ])

    /**
     * Remove the "android" prefix, so if the project name is android-livedata-saga, the namespace
     * will be org.swiften.redux.android.livedata.saga.
     */
    def namespaceSuffixes = project.name.split("-") as List<String>
    namespaceComponents.addAll(namespaceSuffixes.subList(1, namespaceSuffixes.size()))

    namespace = String.join(".", namespaceComponents)
    compileSdkVersion project.ext.compileSdk

    defaultConfig {
      aarMetadata {
        minCompileSdk = project.ext.minSdk
      }

      minSdkVersion project.ext.minSdk
      targetSdkVersion project.ext.targetSdk
      versionCode project.ext.versionCode
      versionName project.ext.versionName

      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
  }

  dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$project.ext.kotlin"
    testImplementation "junit:junit:$project.ext.junit"
    testImplementation "androidx.test:core:$project.ext.androidxTestCore"
    testImplementation "androidx.test:runner:$project.ext.testRunner"
    testImplementation "androidx.test.ext:junit:$project.ext.androidxJunit"
    testImplementation "org.robolectric:robolectric:$project.ext.robolectric"
    androidTestImplementation "androidx.test:runner:$project.ext.testRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$project.ext.espresso"
    androidTestImplementation "androidx.test.ext:junit:$project.ext.androidxJunit"
  }

  /**
   * The group and version settings must be outside the publications block, otherwise the generated
   * POM files will not have the correct groupId and version.
   */
  afterEvaluate {
    publishing {
      publications {
        "$project.name"(MavenPublication) {
          groupId = thisProject.group
          version = thisProject.version
          artifactId = project.name
          from components.release
        }
      }
    }
  }
}

project(":android:android-util") {}

project(":android:android-ui") {
  dependencies {
    api(project(":common:common-core"))
    api(project(":common:common-ui"))
    api(project(":android:android-util"))
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.ext.kotlinCoroutines}")
    testImplementation(project(path: ":common:common-ui", configuration: 'testArtifacts'))
  }
}

project(":android:android-lifecycle") {
  dependencies {
    api(project(":common:common-core"))
    api(project(":common:common-ui"))
    implementation("androidx.appcompat:appcompat:${project.ext.appCompat}")
    testImplementation("androidx.appcompat:appcompat:${project.ext.appCompat}")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.ext.kotlinCoroutines}")
  }
}

project(":android:android-recyclerview") {
  dependencies {
    api project(":android:android-ui")
    api project(":android:android-lifecycle")
    implementation "androidx.lifecycle:lifecycle-runtime:$project.ext.lifecycle"
    implementation "androidx.recyclerview:recyclerview:$project.ext.recyclerView"
    testImplementation project(path: ":android:android-lifecycle", configuration: 'testArtifacts')
  }
}

project(":android:android-saga") {
  dependencies {
    api project(":common:common-saga")
    implementation "io.reactivex.rxjava2:rxjava:$project.ext.rxJava"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$project.ext.kotlinCoroutines"
    implementation "io.reactivex.rxjava2:rxkotlin:$project.ext.rxKotlin"
  }
}

project(":android:android-livedata-saga") {
  dependencies {
    api project(":common:common-saga")
    implementation "androidx.lifecycle:lifecycle-livedata:$project.ext.lifecycle"
    implementation "io.reactivex.rxjava2:rxjava:$project.ext.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$project.ext.rxAndroid"
    testImplementation "androidx.arch.core:core-testing:$project.ext.androidxArchCoreTest"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$project.ext.kotlinCoroutines"
  }
}

project(":android:android-router") {
  dependencies {
    api project(":common:common-core")
    api project(":android:android-util")
    implementation "androidx.appcompat:appcompat:$project.ext.appCompat"
  }
}

project(":android:android-all") {
  apply plugin: "com.kezong.fat-aar"

  def allDependencyNames = new ArrayList<String>([
    ":android:android-util",
    ":android:android-ui",
    ":android:android-lifecycle",
    ":android:android-recyclerview",
    ":android:android-router",
    ":android:android-saga",
    ":android:android-livedata-saga"
  ])

  def allDependencies = allDependencyNames
    .stream()
    .map { dependencyName -> project(dependencyName) }
    .collect(Collectors.toList())

  allDependencyNames.forEach { dependencyName ->
    if (!project(dependencyName).hasProperty("android")) {
      return
    }

    project.evaluationDependsOn(dependencyName)
  }

  afterEvaluate {
    project.android.buildTypes.forEach { variant ->
      def assembleTaskName = "assemble${variant.name.capitalize()}"

      allDependencies.forEach {dependency ->
        def assembleTask = project.tasks.findByName(assembleTaskName)

        if (dependency.hasProperty("android")) {
          assembleTask.dependsOn(dependency.tasks.findByName(assembleTaskName))
        } else {
          assembleTask.dependsOn(dependency.tasks.findByName("assemble"))
        }
      }
    }
  }

  dependencies {
    allDependencies.forEach { dependency ->
      embed(dependency)
    }
  }
}
